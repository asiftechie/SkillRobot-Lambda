{
  "_args": [
    [
      {
        "raw": "voicetics-sdk@file:voicetics-node/",
        "scope": null,
        "escapedName": "voicetics-sdk",
        "name": "voicetics-sdk",
        "rawSpec": "file:voicetics-node/",
        "spec": "/Users/levimatan/GitHub/24meSkill/voicetics-node",
        "type": "directory"
      },
      "/Users/levimatan/GitHub/24meSkill"
    ]
  ],
  "_from": "voicetics-node",
  "_id": "voicetics@0.6.0",
  "_inCache": true,
  "_location": "/voicetics",
  "_phantomChildren": {},
  "_requested": {
    "raw": "voicetics-sdk@file:voicetics-node/",
    "scope": null,
    "escapedName": "voicetics-sdk",
    "name": "voicetics-sdk",
    "rawSpec": "file:voicetics-node/",
    "spec": "/Users/levimatan/GitHub/24meSkill/voicetics-node",
    "type": "directory"
  },
  "_requiredBy": [],
  "_resolved": "file:voicetics-node",
  "_shasum": "2dd19ceded91e6c7bcc5e86082d1cc456c4347cf",
  "_shrinkwrap": null,
  "_spec": "voicetics-sdk@file:voicetics-node/",
  "_where": "/Users/levimatan/GitHub/24meSkill",
  "author": {
    "name": "Matan Levi"
  },
  "bugs": {
    "url": "https://github.com/levimatan/voicetics-node/issues"
  },
  "dependencies": {},
  "description": "A simple server-side API for voicetics",
  "devDependencies": {
    "nodeunit": "^0.9.1",
    "sinon": "^1.14.1"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/levimatan/voicetics-node",
  "keywords": [
    "voicetics",
    "analytics",
    "api",
    "stats",
    "alexa",
    "google home",
    "echo",
    "assistant"
  ],
  "license": "MIT",
  "main": "lib/voicetics-node",
  "name": "voicetics",
  "optionalDependencies": {},
  "readme": "Mixpanel-node\n=============\n[![Build Status](https://travis-ci.org/mixpanel/mixpanel-node.svg?branch=master)](https://travis-ci.org/mixpanel/mixpanel-node)\n\nThis library provides many of the features in the official JavaScript mixpanel library.  It is easy to use, and fully async. It is intended to be used on the server (it is not a client module). The in-browser client library is available\nat [https://github.com/mixpanel/mixpanel-js](https://github.com/mixpanel/mixpanel-js).\n\nInstallation\n------------\n\n    npm install mixpanel\n\nQuick Start\n-----------\n\n```javascript\n// grab the Mixpanel factory\nvar Mixpanel = require('mixpanel');\n\n// create an instance of the mixpanel client\nvar mixpanel = Mixpanel.init('6fd9434dba686db2d1ab66b4462a3a67');\n\n// initialize mixpanel client configured to communicate over https\nvar mixpanel = Mixpanel.init('6fd9434dba686db2d1ab66b4462a3a67', {\n    protocol: 'https'\n});\n\n// track an event with optional properties\nmixpanel.track('my event', {\n    distinct_id: 'some unique client id',\n    as: 'many',\n    properties: 'as',\n    you: 'want'\n});\nmixpanel.track('played_game');\n\n// set an IP address to get automatic geolocation info\nmixpanel.track('my event', {ip: '127.0.0.1'});\n\n// track an event with a specific timestamp (up to 5 days old;\n// use mixpanel.import() for older events)\nmixpanel.track('timed event', {time: new Date()});\n\n// create or update a user in Mixpanel Engage\nmixpanel.people.set('billybob', {\n    $first_name: 'Billy',\n    $last_name: 'Bob',\n    $created: (new Date('jan 1 2013')).toISOString(),\n    plan: 'premium',\n    games_played: 1,\n    points: 0\n});\n\n// create or update a user in Mixpanel Engage without altering $last_seen\n// - pass option $ignore_time: true to prevent the $last_seen property from being updated\nmixpanel.people.set('billybob', {\n    plan: 'premium',\n    games_played: 1\n}, {\n    $ignore_time: true\n});\n\n// set a user profile's IP address to get automatic geolocation info\nmixpanel.people.set('billybob', {\n    plan: 'premium',\n    games_played: 1\n}, {\n    $ip: '127.0.0.1'\n});\n\n// set a single property on a user\nmixpanel.people.set('billybob', 'plan', 'free');\n\n// set a single property on a user, don't override\nmixpanel.people.set_once('billybob', 'first_game_play', (new Date('jan 1 2013')).toISOString());\n\n// increment a numeric property\nmixpanel.people.increment('billybob', 'games_played');\n\n// increment a numeric property by a different amount\nmixpanel.people.increment('billybob', 'points', 15);\n\n// increment multiple properties\nmixpanel.people.increment('billybob', {'points': 10, 'games_played': 1});\n\n// append value to a list\nmixpanel.people.append('billybob', 'awards', 'Great Player');\n\n// append multiple values to a list\nmixpanel.people.append('billybob', {'awards': 'Great Player', 'levels_finished': 'Level 4'});\n\n// merge value to a list (ignoring duplicates)\nmixpanel.people.union('billybob', {'browsers': 'ie'});\n\n// merge multiple values to a list (ignoring duplicates)\nmixpanel.people.union('billybob', {'browsers': ['ie', 'chrome']});\n\n\n// record a transaction for revenue analytics\nmixpanel.people.track_charge('billybob', 39.99);\n\n// clear a users transaction history\nmixpanel.people.clear_charges('billybob');\n\n// delete a user\nmixpanel.people.delete_user('billybob');\n\n// delete a user in Mixpanel Engage without altering $last_seen or resolving aliases\n// - pass option $ignore_time: true to prevent the $last_seen property from being updated\n// (useful if you subsequently re-import data for the same distinct ID)\nmixpanel.people.delete_user('billybob', {$ignore_time: true, $ignore_alias: true});\n\n// Create an alias for an existing distinct id\nmixpanel.alias('distinct_id', 'your_alias');\n\n// all functions that send data to mixpanel take an optional\n// callback as the last argument\nmixpanel.track('test', function(err) { if (err) throw err; });\n\n// import an old event\nvar mixpanel_importer = Mixpanel.init('valid mixpanel token', {\n    key: 'valid api key for project'\n});\n\n// needs to be in the system once for it to show up in the interface\nmixpanel_importer.track('old event', { gender: '' });\n\nmixpanel_importer.import('old event', new Date(2012, 4, 20, 12, 34, 56), {\n    distinct_id: 'billybob',\n    gender: 'male'\n});\n\n// import multiple events at once\nmixpanel_importer.import_batch([\n    {\n        event: 'old event',\n        properties: {\n            time: new Date(2012, 4, 20, 12, 34, 56),\n            distinct_id: 'billybob',\n            gender: 'male'\n        }\n    },\n    {\n        event: 'another old event',\n        properties: {\n            time: new Date(2012, 4, 21, 11, 33, 55),\n            distinct_id: 'billybob',\n            color: 'red'\n        }\n    }\n]);\n```\n\nFAQ\n---\n**Where is `mixpanel.identify()`?**\n\n`mixpanel-node` is a server-side library, optimized for stateless shared usage; e.g.,\nin a web application, the same mixpanel instance is used across requests for all users.\nRather than setting a `distinct_id` through `identify()` calls like Mixpanel client-side\nlibraries (where a single Mixpanel instance is tied to a single user), this library\nrequires you to pass the `distinct_id` with every tracking call. See\nhttps://github.com/mixpanel/mixpanel-node/issues/13.\n\n**How do I get or set superproperties?**\n\nSee the previous answer: the library does not maintain user state internally and so has\nno concept of superproperties for individual users. If you wish to preserve properties\nfor users between requests, you will need to load these properties from a source specific\nto your app (e.g., your session store or database) and pass them explicitly with each\ntracking call.\n\n\nTests\n-----\n\n    # in the mixpanel directory\n    npm install\n    npm test\n\nAlternative Clients and Related Tools\n-------------------------------------\n\n- [Mixpanel-CLI](https://github.com/FGRibreau/mixpanel-cli) - CLI for Mixpanel API (currently only supports tracking functions)\n- [Mixpanel Data Export](https://github.com/michaelcarter/mixpanel-data-export-js) - Supports various query and data-management APIs; runs in both Node.js and browser\n- [Mixpanel Data Export (strawbrary)](https://github.com/strawbrary/mixpanel-data-export-js) - Fork of previous library, optimized for Node.js with support for streaming large raw exports\n\nAttribution/Credits\n-------------------\n\nHeavily inspired by the original js library copyright Mixpanel, Inc.\n(http://mixpanel.com/)\n\nCopyright (c) 2014-15 Mixpanel\nOriginal Library Copyright (c) 2012-14 Carl Sverre\n\nContributions from:\n - [Andres Gottlieb](https://github.com/andresgottlieb)\n - [Ken Perkins](https://github.com/kenperkins)\n - [Nathan Rajlich](https://github.com/TooTallNate)\n - [Thomas Watson Steen](https://github.com/watson)\n - [Gabor Ratky](https://github.com/rgabo)\n - [wwlinx](https://github.com/wwlinx)\n - [PierrickP](https://github.com/PierrickP)\n - [lukapril](https://github.com/lukapril)\n - [sandinmyjoints](https://github.com/sandinmyjoints)\n - [Jyrki Laurila](https://github.com/jylauril)\n - [Zeevl](https://github.com/zeevl)\n - [Tobias Baunb√¶k](https://github.com/freeall)\n - [Eduardo Sorribas](https://github.com/sorribas)\n - [Nick Chang](https://github.com/maeldur)\n - [Michael G](https://github.com/gmichael225)\n - [Tejas Manohar](https://github.com/tejasmanohar)\n - [Eelke Boezeman](https://github.com/godspeedelbow)\n - [Jim Thomas](https://github.com/Left47)\n - [Frank Chiang](https://github.com/chiangf)\n - [Morgan Croney](https://github.com/cruzanmo)\n\nLicense\n-------------------\n\nReleased under the MIT license.  See file called LICENSE for more\ndetails.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/levimatan/voicetics-node.git"
  },
  "scripts": {
    "test": "nodeunit"
  },
  "version": "0.6.0"
}
